---
import { ProductService } from "../../services/productApi";
import {
  brandMapping,
  type BrandKey,
  type ApiProduct,
} from "../../types/product";
import BrandFilter from "./BrandFilter.astro";

type Category = "residential" | "industrial" | "fan";

interface Props {
  defaultCategory?: Category;
  selectedBrand?: BrandKey;
}

const { defaultCategory, selectedBrand } = Astro.props;

let apiProducts: ApiProduct[] = [];

// Obtener productos de la API
try {
  if (selectedBrand) {
    // Si hay una marca seleccionada, buscar por esa marca
    apiProducts = await ProductService.getProductsByBrand(
      brandMapping[selectedBrand].apiParam,
    );
  } else {
    // Si no hay marca seleccionada, obtener todos los productos
    apiProducts = await ProductService.getProducts();
  }
} catch (error) {
  console.error("Error fetching products:", error);
}

// Filtrar productos por categoría y por voltaje/BTU si se proporciona
let filteredProducts = defaultCategory
  ? apiProducts.filter(
      (product) =>
        ProductService.categorizeProduct(product) === defaultCategory,
    )
  : apiProducts;

// Filtrar productos que contengan "NO USAR" en el título
filteredProducts = filteredProducts.filter(
  (product) => !product.display_name.toUpperCase().includes("NO USAR")
);

// Si estamos en una página de marca específica, filtrar solo productos con voltaje o BTU
if (selectedBrand) {
  filteredProducts = filteredProducts.filter((product) => {
    const btu = ProductService.extractBTU(product.display_name);
    const voltage = ProductService.extractVoltage(product.display_name);
    return btu || voltage; // Solo productos que tengan al menos uno de los dos datos
  });
}
---

<div class="max-w-[1400px] mx-auto px-4 sm:px-6">
  <!-- Mobile filter toggle button -->
  <div class="lg:hidden mb-4">
    <button 
      id="mobile-filter-toggle"
      class="w-full flex items-center justify-center gap-2 px-4 py-3 bg-white dark:bg-slate-800 border border-gray-200 dark:border-slate-700 rounded-lg font-medium hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 2v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"/>
      </svg>
      Filtros
      <svg id="mobile-filter-icon" class="w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
      </svg>
    </button>
  </div>

  <div class="flex gap-8">
    <aside class="w-64 flex-shrink-0 hidden lg:block">
      <div class="sticky top-24">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-gray-100 dark:border-slate-700 p-6">
          <h3 class="text-lg font-medium mb-4 text-gray-900 dark:text-white">Marcas</h3>
          <div class="space-y-2" id="brand-filters">
            {Object.entries(brandMapping).map(([key, brand]) => (
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="radio"
                  name="brand-filter"
                  value={key}
                  data-filter="brand"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                  checked={selectedBrand === key}
                />
                <span class="text-gray-700 dark:text-gray-300">{brand.name}</span>
              </label>
            ))}
          </div>

          <div class="mt-6">
            <h3 class="text-lg font-medium mb-4 text-gray-900 dark:text-white">Voltaje</h3>
            <div class="space-y-2">
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="110V"
                  data-filter="voltage"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">110V</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="115V"
                  data-filter="voltage"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">115V</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="220V"
                  data-filter="voltage"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">220V</span>
              </label>
            </div>
          </div>

          <div class="mt-6">
            <h3 class="text-lg font-medium mb-4 text-gray-900 dark:text-white">BTU</h3>
            <div class="space-y-2">
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="12000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">12,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="18000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600"
                />
                <span class="text-gray-700 dark:text-gray-300">18,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="24000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">24,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="36000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">36,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="60000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">60,000 BTU</span>
              </label>
            </div>
          </div>
        </div>
      </div>
    </aside>

    <!-- Mobile filter panel -->
    <div 
      id="mobile-filter-panel" 
      class="lg:hidden fixed inset-0 z-50 bg-black bg-opacity-50 hidden"
    >
      <div class="fixed bottom-0 left-0 right-0 bg-white dark:bg-slate-800 rounded-t-xl max-h-[80vh] overflow-y-auto">
        <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-slate-700">
          <h2 class="text-lg font-semibold">Filtros</h2>
          <button 
            id="mobile-filter-close"
            class="p-2 hover:bg-gray-100 dark:hover:bg-slate-700 rounded-lg transition-colors"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        
        <div class="p-4 space-y-6">
          <div>
            <h3 class="text-lg font-medium mb-4 text-gray-900 dark:text-white">Marcas</h3>
            <div class="space-y-2">
              {Object.entries(brandMapping).map(([key, brand]) => (
                <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                  <input
                    type="radio"
                    name="mobile-brand-filter"
                    value={key}
                    data-filter="brand"
                    class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                    checked={selectedBrand === key}
                  />
                  <span class="text-gray-700 dark:text-gray-300">{brand.name}</span>
                </label>
              ))}
            </div>
          </div>

          <div>
            <h3 class="text-lg font-medium mb-4 text-gray-900 dark:text-white">Voltaje</h3>
            <div class="space-y-2">
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="110V"
                  data-filter="voltage"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">110V</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="115V"
                  data-filter="voltage"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">115V</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="220V"
                  data-filter="voltage"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">220V</span>
              </label>
            </div>
          </div>

          <div>
            <h3 class="text-lg font-medium mb-4 text-gray-900 dark:text-white">BTU</h3>
            <div class="space-y-2">
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="12000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">12,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="18000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">18,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="24000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">24,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="36000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">36,000 BTU</span>
              </label>
              <label class="flex items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-slate-700/50 p-2 rounded-lg transition-colors">
                <input
                  type="checkbox"
                  value="60000"
                  data-filter="btu"
                  class="mr-3 w-4 h-4 text-blue-600 bg-gray-100 dark:bg-slate-600 border-gray-300 dark:border-slate-500 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-2"
                />
                <span class="text-gray-700 dark:text-gray-300">60,000 BTU</span>
              </label>
            </div>
          </div>
          
          <!-- Apply filters button for mobile -->
          <div class="pt-4 border-t border-gray-200 dark:border-slate-700">
            <button 
              id="mobile-apply-filters"
              class="w-full px-4 py-3 bg-gray-900 dark:bg-white text-white dark:text-gray-900 rounded-lg font-medium hover:bg-gray-800 dark:hover:bg-gray-100 transition-colors"
            >
              Aplicar Filtros
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="flex-1">
      {/* Vista Desktop - Tabla */}
      <div class="hidden lg:block overflow-x-auto">
        <table class="w-full">
          <thead>
            <tr class="border-b border-slate-200 dark:border-slate-700">
              <th class="text-left py-4 px-4 text-slate-900 dark:text-white font-medium">
                Modelo
              </th>
              <th class="text-left py-4 px-4 text-slate-900 dark:text-white font-medium">
                Capacidad
              </th>
              <th class="text-left py-4 px-4 text-slate-900 dark:text-white font-medium">
                Voltaje
              </th>
              <th class="text-left py-4 px-4 text-slate-900 dark:text-white font-medium">
                Categoría
              </th>
              <th class="text-left py-4 px-4 text-slate-900 dark:text-white font-medium">
                Precio
              </th>
              <th class="text-left py-4 px-4"></th>
            </tr>
          </thead>
          <tbody class="divide-y divide-slate-200 dark:divide-slate-700" id="desktop-products">
            {
              filteredProducts.length > 0 ? (
                filteredProducts.map((product) => {
                  const btu = ProductService.extractBTU(product.display_name);
                  const voltage = ProductService.extractVoltage(product.display_name);
                  const category = ProductService.categorizeProduct(product);
                  const price = ProductService.formatPrice(product.precio_venta);
                  const cleanName = product.display_name.replace(product.prod_codigo, '').replace(/^\s*-\s*/, '').trim();

                  function createWhatsAppMessage() {
                    return encodeURIComponent(
                      `Hola, estoy interesado en el siguiente producto:\n\n` +
                      `Código: ${product.prod_codigo}\n` +
                      `Producto: ${product.display_name}\n` +
                      `Capacidad: ${btu ? `${parseInt(btu).toLocaleString()} BTU` : 'N/A'}\n` +
                      `Voltaje: ${voltage || 'N/A'}\n` +
                      `Categoría: ${product.categoria_producto_nombre}\n` +
                      (parseFloat(product.precio_venta) > 0 ? `Precio: ${price}\n` : '') +
                      `\n¿Podrían brindarme más información y disponibilidad?`
                    );
                  }

                  return (
                    <tr 
                      class="product-card hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors group"
                      data-id={product.producto_id}
                      data-category={category}
                      data-voltage={voltage}
                      data-btu={btu}
                      data-brand={selectedBrand || ""}
                    >
                      <td class="py-4 px-4">
                        <div class="font-medium text-slate-900 dark:text-white">
                          {cleanName}
                        </div>
                        <div class="text-sm text-slate-500">{product.prod_codigo}</div>
                      </td>
                      <td class="py-4 px-4">
                        {btu ? (
                          <div class="font-bold text-blue-600">
                            {parseInt(btu).toLocaleString()} BTU
                          </div>
                        ) : (
                          <span class="text-slate-400">-</span>
                        )}
                      </td>
                      <td class="py-4 px-4">
                        {voltage ? (
                          <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            voltage === "110V" || voltage === "115V"
                              ? "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
                              : "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300"
                          }`}>
                            {voltage}
                          </span>
                        ) : (
                          <span class="text-slate-400">-</span>
                        )}
                      </td>
                      <td class="py-4 px-4">
                        <div class="text-slate-700 dark:text-slate-300">
                          {product.categoria_producto_nombre}
                        </div>
                        <div class="text-xs text-slate-500">
                          {product.tipo_producto_nombre}
                        </div>
                      </td>
                      <td class="py-4 px-4">
                        {parseFloat(product.precio_venta) > 0 ? (
                          <div class="font-medium text-slate-900 dark:text-white">
                            {price}
                          </div>
                        ) : (
                          <span class="text-slate-500">Consultar precio</span>
                        )}
                      </td>
                      <td class="py-4 px-4">
                        <a
                          href={`https://wa.me/50577726999?text=${createWhatsAppMessage()}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="opacity-0 group-hover:opacity-100 transition-opacity text-blue-600 hover:text-blue-800 dark:hover:text-blue-400 font-medium flex items-center gap-2"
                        >
                          Contactar <span class="text-lg">→</span>
                        </a>
                      </td>
                    </tr>
                  );
                })
              ) : (
                <tr>
                  <td colspan="6" class="text-center py-12">
                    <p class="text-gray-500">No se encontraron productos</p>
                  </td>
                </tr>
              )
            }
          </tbody>
        </table>
      </div>

      {/* Vista Móvil - Cards */}
      <div class="lg:hidden grid grid-cols-1 md:grid-cols-2 gap-4 p-4" id="mobile-products">
        {
          filteredProducts.length > 0 ? (
            filteredProducts.map((product) => {
              const btu = ProductService.extractBTU(product.display_name);
              const voltage = ProductService.extractVoltage(product.display_name);
              const category = ProductService.categorizeProduct(product);
              const price = ProductService.formatPrice(product.precio_venta);
              const cleanName = product.display_name.replace(product.prod_codigo, '').replace(/^\s*-\s*/, '').trim();

              function createWhatsAppMessage() {
                return encodeURIComponent(
                  `Hola, estoy interesado en el siguiente producto:\n\n` +
                  `Código: ${product.prod_codigo}\n` +
                  `Producto: ${product.display_name}\n` +
                  `Capacidad: ${btu ? `${parseInt(btu).toLocaleString()} BTU` : 'N/A'}\n` +
                  `Voltaje: ${voltage || 'N/A'}\n` +
                  `Categoría: ${product.categoria_producto_nombre}\n` +
                  (parseFloat(product.precio_venta) > 0 ? `Precio: ${price}\n` : '') +
                  `\n¿Podrían brindarme más información y disponibilidad?`
                );
              }

              return (
                <div 
                  class="product-card bg-white dark:bg-slate-800/50 rounded-lg p-4 shadow-sm hover:shadow-md transition-all"
                  data-id={product.producto_id}
                  data-category={category}
                  data-voltage={voltage}
                  data-btu={btu}
                  data-brand={selectedBrand || ""}
                >
                  <div class="flex justify-between items-start gap-2 mb-3">
                    <div>
                      <h3 class="font-medium text-slate-900 dark:text-white">
                        {cleanName}
                      </h3>
                      <p class="text-xs text-slate-500 mt-0.5">{product.prod_codigo}</p>
                    </div>
                    {voltage && (
                      <span class={`shrink-0 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                        voltage === "110V" || voltage === "115V"
                          ? "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300"
                          : "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300"
                      }`}>
                        {voltage}
                      </span>
                    )}
                  </div>

                  <div class="grid grid-cols-2 gap-4 mb-3">
                    <div class="flex items-center gap-2">
                      <span class="text-xs text-slate-500">Capacidad:</span>
                      {btu ? (
                        <span class="font-medium text-blue-600">
                          {parseInt(btu).toLocaleString()} BTU
                        </span>
                      ) : (
                        <span class="text-slate-400">-</span>
                      )}
                    </div>
                    <div class="flex items-center gap-2">
                      <span class="text-xs text-slate-500">Precio:</span>
                      {parseFloat(product.precio_venta) > 0 ? (
                        <span class="font-medium text-slate-700 dark:text-slate-300">
                          {price}
                        </span>
                      ) : (
                        <span class="text-slate-400 text-xs">Consultar</span>
                      )}
                    </div>
                  </div>

                  <div class="space-y-1.5 py-2 border-t border-slate-200 dark:border-slate-700 mb-3">
                    <div class="flex gap-2">
                      <span class="text-xs text-slate-500">Categoría:</span>
                      <span class="text-xs text-slate-700 dark:text-slate-300">
                        {product.categoria_producto_nombre}
                      </span>
                    </div>
                    <div class="flex gap-2">
                      <span class="text-xs text-slate-500">Tipo:</span>
                      <span class="text-xs text-slate-700 dark:text-slate-300">
                        {product.tipo_producto_nombre}
                      </span>
                    </div>
                  </div>

                  <a
                    href={`https://wa.me/50577726999?text=${createWhatsAppMessage()}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="w-full py-1.5 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors text-xs font-medium flex items-center justify-center gap-1"
                  >
                    Contactar <span class="text-sm">→</span>
                  </a>
                </div>
              );
            })
          ) : (
            <div class="col-span-full text-center py-12">
              <p class="text-gray-500">No se encontraron productos</p>
            </div>
          )
        }
      </div>
    </div>
  </div>
</div>

<script>
  let filters: {
    voltages: string[];
    btus: number[];
    selectedBrand: string;
  } = {
    voltages: [],
    btus: [],
    selectedBrand: "",
  };

  function updateFilters() {
    const voltageInputs = document.querySelectorAll('[data-filter="voltage"]');
    const btuInputs = document.querySelectorAll('[data-filter="btu"]');
    const brandInputs = document.querySelectorAll('[data-filter="brand"]');

    // Get selected brand (radio button) - check both desktop and mobile
    const selectedBrandInput = Array.from(brandInputs).find(
      (input) => (input as HTMLInputElement).checked
    ) as HTMLInputElement;

    filters = {
      voltages: Array.from(voltageInputs)
        .filter((input) => (input as HTMLInputElement).checked)
        .map((input) => (input as HTMLInputElement).value),
      btus: Array.from(btuInputs)
        .filter((input) => (input as HTMLInputElement).checked)
        .map((input) => parseInt((input as HTMLInputElement).value)),
      selectedBrand: selectedBrandInput ? selectedBrandInput.value : "",
    };

    console.log('Filters updated:', filters); // Debug log
    applyFilters();
  }

  function applyFilters() {
    // Handle brand navigation - when brand is selected/changed
    const currentPath = window.location.pathname;
    const currentBrand = currentPath.match(/\/catalogo\/marca\/([^\/]+)/)?.[1] || "";
    
    console.log('Current brand:', currentBrand, 'Selected brand:', filters.selectedBrand); // Debug log
    
    if (filters.selectedBrand !== currentBrand) {
      if (filters.selectedBrand === "") {
        // Navigate to general catalog
        console.log('Navigating to general catalog');
        window.location.href = "/catalogo";
        return;
      } else {
        // Navigate to specific brand page
        console.log('Navigating to brand:', filters.selectedBrand);
        window.location.href = `/catalogo/marca/${filters.selectedBrand}`;
        return;
      }
    }

    // Apply voltage and BTU filters to visible cards (both desktop table rows and mobile cards)
    const cards = document.querySelectorAll(".product-card");
    cards.forEach((card) => {
      const voltage = card.getAttribute("data-voltage");
      const btu = parseInt(card.getAttribute("data-btu") || "0");

      const matchesVoltage =
        filters.voltages.length === 0 ||
        (voltage && filters.voltages.includes(voltage));
      const matchesBTU =
        filters.btus.length === 0 || (btu && filters.btus.includes(btu));

      card.classList.toggle("hidden", !(matchesVoltage && matchesBTU));
    });
  }

  // Mobile filter panel functions
  function toggleMobileFilters() {
    const panel = document.getElementById("mobile-filter-panel");
    const icon = document.getElementById("mobile-filter-icon");
    
    if (panel && icon) {
      const isHidden = panel.classList.contains("hidden");
      
      if (isHidden) {
        panel.classList.remove("hidden");
        icon.style.transform = "rotate(180deg)";
        document.body.style.overflow = "hidden";
      } else {
        panel.classList.add("hidden");
        icon.style.transform = "rotate(0deg)";
        document.body.style.overflow = "";
      }
    }
  }

  function closeMobileFilters() {
    const panel = document.getElementById("mobile-filter-panel");
    const icon = document.getElementById("mobile-filter-icon");
    
    if (panel && icon) {
      panel.classList.add("hidden");
      icon.style.transform = "rotate(0deg)";
      document.body.style.overflow = "";
    }
  }

  // Event listeners
  document.addEventListener("DOMContentLoaded", () => {
    console.log('DOM loaded, setting up event listeners'); // Debug log
    
    const filterInputs = document.querySelectorAll("[data-filter]");
    console.log('Found filter inputs:', filterInputs.length); // Debug log
    
    filterInputs.forEach((input) => {
      input.addEventListener("change", (e) => {
        console.log('Filter changed:', e.target.value, e.target.checked); // Debug log
        updateFilters();
      });
      input.addEventListener("input", (e) => {
        console.log('Filter input:', e.target.value, e.target.checked); // Debug log
        updateFilters();
      });
    });

    // Mobile filter panel listeners
    const mobileToggle = document.getElementById("mobile-filter-toggle");
    const mobileClose = document.getElementById("mobile-filter-close");
    const mobileApply = document.getElementById("mobile-apply-filters");
    const mobilePanel = document.getElementById("mobile-filter-panel");

    if (mobileToggle) {
      mobileToggle.addEventListener("click", toggleMobileFilters);
    }

    if (mobileClose) {
      mobileClose.addEventListener("click", closeMobileFilters);
    }

    if (mobileApply) {
      mobileApply.addEventListener("click", () => {
        updateFilters();
        closeMobileFilters();
      });
    }

    // Close on background click
    if (mobilePanel) {
      mobilePanel.addEventListener("click", (e) => {
        if (e.target === mobilePanel) {
          closeMobileFilters();
        }
      });
    }

    // Inicializa los filtros
    console.log('Initializing filters'); // Debug log
    updateFilters();
  });
</script>
