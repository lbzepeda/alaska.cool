---
import {
  VIDEO_URL_RESIDENTIAL_AC,
  VIDEO_URL_INDUSTRIAL_FAN,
  VIDEO_URL_INDUSTRIAL_AC,
} from "../../config";
import { getLanguageFromUrl, t } from '../i18n/utils';
import { getRelativeLocaleUrl } from 'astro:i18n';

const currentLang = getLanguageFromUrl(Astro.url);

// Fallback video URLs if env variables are not set
const VIDEO_URLS = {
  residential: VIDEO_URL_RESIDENTIAL_AC || "",
  industrial: VIDEO_URL_INDUSTRIAL_AC || "",
  fan: VIDEO_URL_INDUSTRIAL_FAN || "",
};

const IMAGES = {
  residential: {
    src: "/assets/residencial_ac_preview.webp",
    width: 800,
    height: 600,
    placeholder: "data:image/webp;base64,...",
  },
  industrial: {
    src: "/assets/industrial_comercial_preview.webp",
    width: 800,
    height: 600,
    placeholder: "data:image/webp;base64,...",
  },
  fan: {
    src: "/assets/industrial_fan_preview.webp",
    width: 800,
    height: 600,
    placeholder: "data:image/webp;base64,...",
  },
};
---

<link
  rel="preload"
  as="image"
  href={IMAGES.residential.src}
  imagesrcset={`${IMAGES.residential.src} 800w`}
  imagesizes="(max-width: 768px) 100vw, 50vw"
/>
<link
  rel="preload"
  as="image"
  href={IMAGES.industrial.src}
  imagesrcset={`${IMAGES.industrial.src} 800w`}
  imagesizes="100vw"
/>

<section id="home" class="bg-[#FBFBFD] dark:bg-black py-12 pt-28">
  <div class="max-w-[1200px] mx-auto px-4 sm:px-6">
    <div class="text-center max-w-xl mx-auto mb-12" data-text="reveal">
      <span class="text-blue-600 dark:text-blue-400 font-medium mb-2 block">
        {t(currentLang, 'home.discover')}
      </span>
      <h1
        class="text-4xl md:text-3xl font-semibold text-slate-900 dark:text-white mb-4"
      >
        {t(currentLang, 'home.productsTitle')}
      </h1>
      <p class="text-slate-600 dark:text-slate-400 text-lg">
        {t(currentLang, 'home.innovation')}
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-0">
      <!-- AC Residencial -->
      <a
        href={getRelativeLocaleUrl(currentLang, '/catalogo/marca/tempblue')}
        class="relative overflow-hidden group cursor-pointer h-[400px] transition-transform duration-300 hover:scale-[1.02]"
      >
        <div
          class="absolute inset-0 z-10 bg-black/50 group-hover:bg-black/30 transition-colors duration-500"
        >
        </div>
        <picture>
          <source
            type="image/webp"
            srcset={`${IMAGES.residential.src} 800w`}
            sizes="(max-width: 768px) 100vw, 33vw"
          />
          <img
            src={IMAGES.residential.src}
            alt="AC Residencial Preview"
            class="absolute inset-0 w-full h-full object-cover"
            loading="eager"
            width={IMAGES.residential.width}
            height={IMAGES.residential.height}
            decoding="async"
            style={`background-image: url(${IMAGES.residential.placeholder}); background-size: cover;`}
            fetchpriority="high"
          />
        </picture>
        <video
          class="absolute inset-0 w-full h-full object-cover opacity-0 lazy-video"
          loop
          muted
          playsinline
          preload="none"
          data-src={VIDEO_URLS.residential}
          width={IMAGES.residential.width}
          height={IMAGES.residential.height}></video>
        <div
          class="absolute inset-0 z-20 flex flex-col items-center justify-center p-6"
        >
          <h2
            class="text-2xl md:text-3xl font-medium tracking-tight text-white text-center mb-2"
          >
            {t(currentLang, 'home.residential.title')}
          </h2>
          <p class="text-white/90 text-base text-center mb-4">
            {t(currentLang, 'home.residential.description')}
          </p>
          <span
            class="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full text-white text-sm font-medium opacity-0 group-hover:opacity-100 transform translate-y-2 group-hover:translate-y-0 transition-all duration-300"
          >
            {t(currentLang, 'home.residential.cta')}
          </span>
        </div>
      </a>

      <!-- Industrial Comercial -->
      <a
        href={getRelativeLocaleUrl(currentLang, '/catalogo/marca/tempblue')}
        class="relative overflow-hidden group cursor-pointer h-[400px] transition-transform duration-300 hover:scale-[1.02]"
      >
        <div
          class="absolute inset-0 z-10 bg-black/50 group-hover:bg-black/30 transition-colors duration-500"
        >
        </div>
        <picture>
          <source
            type="image/webp"
            srcset={`${IMAGES.industrial.src} 800w`}
            sizes="(max-width: 768px) 100vw, 33vw"
          />
          <img
            src={IMAGES.industrial.src}
            alt="Industrial AC Preview"
            class="absolute inset-0 w-full h-full object-cover"
            loading="eager"
            width={IMAGES.industrial.width}
            height={IMAGES.industrial.height}
            decoding="async"
            style={`background-image: url(${IMAGES.industrial.placeholder}); background-size: cover;`}
            fetchpriority="high"
          />
        </picture>
        <video
          class="absolute inset-0 w-full h-full object-cover opacity-0 lazy-video"
          loop
          muted
          playsinline
          preload="none"
          data-src={VIDEO_URLS.industrial}
          width={IMAGES.industrial.width}
          height={IMAGES.industrial.height}
        >
        </video>
        <div
          class="absolute inset-0 z-20 flex flex-col items-center justify-center p-6"
        >
          <h2
            class="text-2xl md:text-3xl font-medium tracking-tight text-white text-center mb-2"
          >
            {t(currentLang, 'home.industrial.title')}
          </h2>
          <p class="text-white/90 text-base text-center mb-4">
            {t(currentLang, 'home.industrial.description')}
          </p>
          <span
            class="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full text-white text-sm font-medium opacity-0 group-hover:opacity-100 transform translate-y-2 group-hover:translate-y-0 transition-all duration-300"
          >
            {t(currentLang, 'home.industrial.cta')}
          </span>
        </div>
      </a>

      <!-- Ventilación Forzada -->
      <a
        href={getRelativeLocaleUrl(currentLang, '/catalogo/marca/tempblue')}
        class="relative overflow-hidden group cursor-pointer h-[400px] transition-transform duration-300 hover:scale-[1.02]"
      >
        <div
          class="absolute inset-0 z-10 bg-black/50 group-hover:bg-black/30 transition-colors duration-500"
        >
        </div>
        <picture>
          <source
            type="image/webp"
            srcset={`${IMAGES.fan.src} 800w`}
            sizes="(max-width: 768px) 100vw, 33vw"
          />
          <img
            src={IMAGES.fan.src}
            alt="Ventilación Forzada Preview"
            class="absolute inset-0 w-full h-full object-cover"
            loading="eager"
            width={IMAGES.fan.width}
            height={IMAGES.fan.height}
            style={`background-image: url(${IMAGES.fan.placeholder}); background-size: cover;`}
            fetchpriority="high"
          />
        </picture>
        <video
          class="absolute inset-0 w-full h-full object-cover opacity-0 lazy-video"
          loop
          muted
          playsinline
          preload="none"
          data-src={VIDEO_URLS.fan}
          width={IMAGES.fan.width}
          height={IMAGES.fan.height}></video>
        <div
          class="absolute inset-0 z-20 flex flex-col items-center justify-center p-6"
        >
          <h2
            class="text-2xl md:text-3xl font-medium tracking-tight text-white text-center mb-2"
          >
            {t(currentLang, 'home.ventilation.title')}
          </h2>
          <p class="text-white/90 text-base text-center mb-4">
            {t(currentLang, 'home.ventilation.description')}
          </p>
          <span
            class="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full text-white text-sm font-medium opacity-0 group-hover:opacity-100 transform translate-y-2 group-hover:translate-y-0 transition-all duration-300"
          >
            {t(currentLang, 'home.ventilation.cta')}
          </span>
        </div>
      </a>
    </div>
  </div>
</section>

<script>
  const videoObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const video = entry.target as HTMLVideoElement;
        if (entry.isIntersecting) {
          if (video.dataset.src && !video.src) {
            video.src = video.dataset.src;
          }
          video.load();
        }
      });
    },
    {
      rootMargin: "50px 0px",
      threshold: 0.1,
    },
  );

  let isInitialized = false;
  const isSafari = navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
  
  function initializeVideoHandlers() {
    console.log('Initializing video handlers... Safari:', isSafari);
    
    // For Safari, always reinitialize to ensure videos work
    if (isInitialized && !isSafari) {
      console.log('Videos already initialized, refreshing...');
      // Just refresh video sources for existing videos (only if src exists)
      const videos = document.querySelectorAll(".lazy-video");
      videos.forEach((video) => {
        const videoElement = video as HTMLVideoElement;
        if (videoElement.dataset.src && videoElement.dataset.src.trim() !== "" && !videoElement.src) {
          videoElement.src = videoElement.dataset.src;
          videoElement.load();
        }
      });
      return;
    }

    console.log('Initializing video handlers...');
    const videoContainers = document.querySelectorAll(".group");
    const videos = document.querySelectorAll(".lazy-video");

    // Safari-specific video handling
    videos.forEach((video) => {
      const videoElement = video as HTMLVideoElement;
      
      // Force reload video source for Safari (only if src exists)
      if (isSafari && videoElement.dataset.src && videoElement.dataset.src.trim() !== "") {
        videoElement.src = videoElement.dataset.src;
        videoElement.load();
      }
      
      videoObserver.observe(video);
    });

    videoContainers.forEach((container) => {
      const video = container.querySelector("video") as HTMLVideoElement;
      if (!video) return;

      let playTimeout: ReturnType<typeof setTimeout>;

      const playVideo = () => {
        video.classList.remove("opacity-0");
        video.currentTime = 0;
        video.play().catch(() => {});
      };

      const enterHandler = () => {
        clearTimeout(playTimeout);
        const delay = isSafari ? 200 : 100; // Safari needs more time
        
        playTimeout = setTimeout(() => {
          // Only try to play if video has a valid source
          if (video.dataset.src && video.dataset.src.trim() !== "") {
            if (video.readyState >= 3) {
              playVideo();
            } else {
              // Safari needs explicit src setting
              if (isSafari && video.dataset.src && !video.src) {
                video.src = video.dataset.src;
              }
              video.load();
              video.addEventListener("canplay", playVideo, { once: true });
            }
          }
        }, delay);
      };

      const leaveHandler = () => {
        clearTimeout(playTimeout);
        video.classList.add("opacity-0");
        video.pause();
        video.currentTime = 0;
      };

      // Remove existing listeners for Safari (to avoid duplicates)
      if (isSafari) {
        container.removeEventListener("mouseenter", enterHandler);
        container.removeEventListener("mouseleave", leaveHandler);
      }

      container.addEventListener("mouseenter", enterHandler, {
        passive: true,
      });
      container.addEventListener("mouseleave", leaveHandler, {
        passive: true,
      });
    });
    
    isInitialized = true;
  }

  document.addEventListener("DOMContentLoaded", initializeVideoHandlers);
  document.addEventListener("astro:page-load", initializeVideoHandlers);
  
  // Handle hash navigation (like /#home from logo click)
  window.addEventListener("hashchange", () => {
    console.log('Hash changed to:', window.location.hash);
    if (window.location.hash === "#home") {
      const delay = isSafari ? 400 : 100; // Safari needs more time
      setTimeout(() => {
        if (isSafari) {
          isInitialized = false; // Force reinit for Safari
        }
        initializeVideoHandlers();
      }, delay);
    }
  });
  
  // Handle direct navigation to /#home
  if (window.location.hash === "#home") {
    const delay = isSafari ? 300 : 100;
    setTimeout(initializeVideoHandlers, delay);
  }
  
  // Safari-specific: Additional listener for popstate (back/forward navigation)
  if (isSafari) {
    window.addEventListener("popstate", () => {
      if (window.location.hash === "#home" || window.location.pathname === "/") {
        setTimeout(() => {
          isInitialized = false; // Force reinit for Safari
          initializeVideoHandlers();
        }, 400);
      }
    });
  }
  
  // Additional handler for when the home section becomes visible
  const homeSection = document.getElementById("home");
  if (homeSection) {
    const homeObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const delay = isSafari ? 200 : 50; // Safari needs more time
            setTimeout(() => {
              if (isSafari) {
                isInitialized = false; // Force reinit for Safari
              }
              initializeVideoHandlers();
            }, delay);
          }
        });
      },
      { threshold: 0.1 }
    );
    homeObserver.observe(homeSection);
  }
  
  // Safari-specific: Force video initialization on focus/blur events
  if (isSafari) {
    window.addEventListener("focus", () => {
      if (window.location.hash === "#home" || window.location.pathname === "/") {
        setTimeout(() => {
          isInitialized = false;
          initializeVideoHandlers();
        }, 200);
      }
    });
    
    // Safari-specific: Handle logo clicks directly
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      const link = target.closest('a[href="/#home"]');
      
      if (link) {
        console.log('Logo clicked in Safari, forcing video reinitialization');
        setTimeout(() => {
          isInitialized = false;
          initializeVideoHandlers();
        }, 400); // Extra delay for Safari hash navigation
      }
    });
    
    // Safari-specific: Monitor for hash changes more aggressively
    let lastHash = window.location.hash;
    setInterval(() => {
      if (window.location.hash !== lastHash) {
        lastHash = window.location.hash;
        if (lastHash === "#home") {
          console.log('Hash changed to #home in Safari');
          setTimeout(() => {
            isInitialized = false;
            initializeVideoHandlers();
          }, 300);
        }
      }
    }, 100);
  }
</script>

<style>
  .lazy-video {
    will-change: transform, opacity;
    transition: opacity 0.3s ease-out;
  }

  @media (prefers-reduced-motion: no-preference) {
    .group:hover .lazy-video {
      transform: scale(1.05);
      transition:
        transform 0.5s cubic-bezier(0.4, 0, 0.2, 1),
        opacity 0.3s ease-out;
    }
  }

  [data-text="reveal"] {
    opacity: 0;
    transform: translateY(10px);
    animation: fadeUp 0.8s cubic-bezier(0.2, 0.8, 0.2, 1) forwards;
  }

  @keyframes fadeUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
