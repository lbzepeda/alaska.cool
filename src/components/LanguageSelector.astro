---
import { getRelativeLocaleUrl } from 'astro:i18n';
import { siteConfig } from '../config/site';

interface Props {
  currentLang: 'es' | 'en';
  currentPath: string;
  variant?: 'desktop' | 'mobile';
}

const { currentLang, currentPath, variant = 'desktop' } = Astro.props;

// Remove language prefix from path for alternate language
const cleanPath = currentPath.replace(/^\/(es|en)/, '') || '/';

const alternateLinks = Object.keys(siteConfig.languages).map(lang => ({
  lang: lang as keyof typeof siteConfig.languages,
  url: getRelativeLocaleUrl(lang, cleanPath),
  label: siteConfig.languages[lang as keyof typeof siteConfig.languages]
}));

// Create unique IDs based on variant
const buttonId = `language-menu-button-${variant}`;
const menuId = `language-menu-${variant}`;
---

<div class="relative inline-block text-left">
  <button
    id={buttonId}
    type="button"
    class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-blue-400 dark:ring-offset-gray-800"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-2">🌐</span>
    {siteConfig.languages[currentLang]}
    <svg
      class="-mr-1 ml-2 h-5 w-5"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
    >
      <path
        fill-rule="evenodd"
        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
        clip-rule="evenodd"
      ></path>
    </svg>
  </button>

  <div
    id={menuId}
    class="hidden origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-xl bg-white dark:bg-gray-800 ring-1 ring-black dark:ring-gray-600 ring-opacity-5 dark:ring-opacity-75 focus:outline-none z-[60]"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby={buttonId}
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {
        alternateLinks.map(({ lang, url, label }) => (
          <a
            href={url}
            class={`block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100 ${
              lang === currentLang
                ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 font-medium'
                : 'text-gray-700 dark:text-gray-300'
            }`}
            role="menuitem"
          >
            {label}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script define:vars={{ buttonId, menuId }} is:inline>
  // Usar una función auto-ejecutable para crear un scope limpio
  (function() {
    // Variables para almacenar los handlers actuales
    let currentToggleHandler = null;
    let currentOutsideClickHandler = null;
    let currentEscapeHandler = null;
    let currentScrollHandler = null;

    function initLanguageSelector() {
      const button = document.getElementById(buttonId);
      const menu = document.getElementById(menuId);

      if (button && menu) {
        // Limpiar listeners existentes
        if (currentToggleHandler) {
          button.removeEventListener('click', currentToggleHandler);
          currentToggleHandler = null;
        }
        if (currentOutsideClickHandler) {
          document.removeEventListener('click', currentOutsideClickHandler);
          currentOutsideClickHandler = null;
        }
        if (currentEscapeHandler) {
          document.removeEventListener('keydown', currentEscapeHandler);
          currentEscapeHandler = null;
        }
        if (currentScrollHandler) {
          window.removeEventListener('scroll', currentScrollHandler);
          currentScrollHandler = null;
        }

        const closeMenu = () => {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
        };

        // Crear nuevo toggle handler - SIMPLE como theme toggle
        currentToggleHandler = (event) => {
          event.preventDefault();
          event.stopPropagation();
          
          const isExpanded = button.getAttribute('aria-expanded') === 'true';
          button.setAttribute('aria-expanded', (!isExpanded).toString());
          menu.classList.toggle('hidden');
          
          // Solo focus en desktop, no en móvil
          if (!isExpanded && !('ontouchstart' in window)) {
            setTimeout(() => {
              menu.focus();
            }, 10);
          }
        };

        // Crear nuevo outside click handler con mejor detección en móvil
        currentOutsideClickHandler = (event) => {
          const target = event.target;
          // Verificar si el menú está visible antes de procesarlo
          if (!menu.classList.contains('hidden') && 
              !button.contains(target) && 
              !menu.contains(target)) {
            closeMenu();
          }
        };

        // Crear nuevo escape handler
        currentEscapeHandler = (event) => {
          if (event.key === 'Escape') {
            closeMenu();
          }
        };

        // Auto-close on scroll to prevent conflicts with navbar hide/show
        currentScrollHandler = () => {
          if (!menu.classList.contains('hidden')) {
            closeMenu();
          }
        };

        // Agregar listeners - SIMPLE como theme toggle (solo click)
        button.addEventListener('click', currentToggleHandler);
        document.addEventListener('click', currentOutsideClickHandler);
        document.addEventListener('keydown', currentEscapeHandler);
        window.addEventListener('scroll', currentScrollHandler, { passive: true });
      }
    }

    // Inicializar inmediatamente si el DOM ya está cargado
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initLanguageSelector);
    } else {
      initLanguageSelector();
    }
    
    // Reinicializar en las transiciones de página de Astro
    document.addEventListener('astro:after-swap', initLanguageSelector);
    document.addEventListener('astro:page-load', initLanguageSelector);
  })();
</script>