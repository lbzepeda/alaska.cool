---
import { getRelativeLocaleUrl } from 'astro:i18n';
import { siteConfig } from '../config/site';

interface Props {
  currentLang: 'es' | 'en';
  currentPath: string;
}

const { currentLang, currentPath } = Astro.props;

// Remove language prefix from path for alternate language
const cleanPath = currentPath.replace(/^\/(es|en)/, '') || '/';

const alternateLinks = Object.keys(siteConfig.languages).map(lang => ({
  lang: lang as keyof typeof siteConfig.languages,
  url: getRelativeLocaleUrl(lang, cleanPath),
  label: siteConfig.languages[lang as keyof typeof siteConfig.languages]
}));
---

<div class="relative inline-block text-left">
  <button
    id="language-menu-button"
    type="button"
    class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-2">üåê</span>
    {siteConfig.languages[currentLang]}
    <svg
      class="-mr-1 ml-2 h-5 w-5"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
    >
      <path
        fill-rule="evenodd"
        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
        clip-rule="evenodd"
      ></path>
    </svg>
  </button>

  <div
    id="language-menu"
    class="hidden origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
  >
    <div class="py-1" role="none">
      {
        alternateLinks.map(({ lang, url, label }) => (
          <a
            href={url}
            class={`block px-4 py-2 text-sm hover:bg-gray-100 hover:text-gray-900 ${
              lang === currentLang
                ? 'bg-gray-100 text-gray-900 font-medium'
                : 'text-gray-700'
            }`}
            role="menuitem"
          >
            {label}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-menu-button');
    const menu = document.getElementById('language-menu');

    if (button && menu) {
      const toggleMenu = () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!isExpanded).toString());
        menu.classList.toggle('hidden');
      };

      button.addEventListener('click', toggleMenu);

      // Close menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
          button.setAttribute('aria-expanded', 'false');
          menu.classList.add('hidden');
        }
      });
    }
  });
</script>